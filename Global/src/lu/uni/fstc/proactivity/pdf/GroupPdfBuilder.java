package lu.uni.fstc.proactivity.pdf;

import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import java.io.*;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.GregorianCalendar;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYDataset;
import com.itextpdf.awt.PdfGraphics2D;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;


/**
 * @author REMUS
 *
 */
public class GroupPdfBuilder extends PdfBuilder{
	private String contenthashFile,  pathnamehashString, contenthashString, pathnamehashFile, groupName;
	private final String pdfDescription = "<p>Bravo !</p>", displayOptions = "a:2:{s:12:\"printheading\";i:0;s:10:\"printintro\";i:1;}" ;
	private DefaultCategoryDataset groupNewLeaveStudents;
	private XYDataset groupActivity;
	private final float width = 500, height = 200;
	private Image xyImage, barImage2;
	private long fileSize, stringSize = 0;
	private JFreeChart barChart2, xyChart;
	private GregorianCalendar cal;
	
	private final Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private final Font small = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
	private final Font smallItalic = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.ITALIC);

	private GroupPdfBuilder() {
		super.setType("Group");
	}

	/**
	 * @param groupActivity
	 * @param groupNewLeaveStudents
	 * @param groupName 
	 */
	public GroupPdfBuilder(final XYDataset groupActivity,
			final DefaultCategoryDataset groupNewLeaveStudents,
			final String groupName) {

		this();
		cal = new GregorianCalendar();
		this.groupActivity = groupActivity;		
		this.groupNewLeaveStudents = groupNewLeaveStudents;
		this.groupName = removeAccents(groupName.replace("/", ""));
		// this.FILE = "stats/"+removeAccents(groupName.replace("/", ""))+".pdf";
		// System.out.println(FILE);
		// this.FILE = "/home/moodle/stats/"+this.groupName+".pdf";
		this.FILE = "stats/"+this.groupName+".pdf";
		buildDocument();
	}
	
	@Override
	protected void addMetaData(final Document document) {
		document.addTitle("Statistics");
		document.addSubject("Statistics about the Social Groups");
		document.addKeywords("Social Groups");
		document.addAuthor("Dobrican Remus");
		document.addCreator("Dobrican Remus");
	}
	
	@Override
	protected void addTitlePage(final Document document, final PdfWriter writer) throws DocumentException {
		final Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Group Statistics", titleFont));

		// We add one empty line
		addEmptyLine(preface, 1);
		// We add the content
		addContent(preface);
		
		// creates the first set of statistics
		createImages(writer, preface);
		
		// We add one empty line
		addEmptyLine(preface, 1);

		document.add(preface);
		// Start a new page
		document.newPage();
	}

	@Override
	protected void addContent(final Paragraph preface) {
		final Chunk chunk_a1 = new Chunk(
				"	This report generated by the Proactive System in order to provide students with"
						+ "fresh news about the interaction inside the social groups.", small);
		final Chunk chunk_b1 = new Chunk(
				" Below you have information about some of the most "
						+ "interesting data from your Group - ", small);
		final Chunk chunk_b2 = new Chunk(groupName + ".", smallItalic);

		final Paragraph firstSentence = new Paragraph();
		firstSentence.add(chunk_a1);
		firstSentence.add(chunk_b1);
		firstSentence.add(chunk_b2);
		preface.add(firstSentence);
		
		// We add one empty line
		addEmptyLine(preface, 1);
		
		final Chunk chunk_b3 = new Chunk(
				" The timeline in figure 3 contains information about the activity level on your group for each week " +
				"and in the timeline in figure 4 there is information on how many new students have joined the group and how many refused.", small);
		
		final Paragraph secondSentence = new Paragraph();
		secondSentence.add(chunk_b3);
		preface.add(secondSentence);
		
		// We add one empty line
		addEmptyLine(preface, 1);
		
		final Chunk chunk_b4 = new Chunk(
				" This is week is the " + cal.get(GregorianCalendar.WEEK_OF_YEAR) +  " week of the year 2013." , small);
		
		final Paragraph thirdSentence = new Paragraph();
		thirdSentence.add(chunk_b4);
		preface.add(thirdSentence);
	}
	
	private void addEmptyLine(final Paragraph paragraph, final int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
	
	@Override
	protected void createImages(final PdfWriter writer, final Paragraph preface) throws DocumentException {
		final PdfContentByte cb = writer.getDirectContent();
		
		// XYChart
		final PdfTemplate xy = cb.createTemplate(width, height);		
		final Graphics2D g2d3 = new PdfGraphics2D(xy, width, height);
		final Rectangle2D r2d3 = new Rectangle2D.Double(0, 0, width, height);
		
		
        xyChart = ChartFactory.createXYLineChart(
            "Group Activity",
            "Week of the Year",
            "Number of actions",
            groupActivity,
            PlotOrientation.VERTICAL,
            true,
            false,
            false
        );
        final XYPlot plotXY = (XYPlot)xyChart.getPlot();
        final XYLineAndShapeRenderer renderer = new XYLineAndShapeRenderer();
        renderer.setSeriesLinesVisible(0, true);
        renderer.setSeriesShapesVisible(0, false);
        renderer.setSeriesLinesVisible(1, false);
        renderer.setSeriesShapesVisible(1, true);        
        plotXY.setRenderer(renderer);    
        
        xyChart.getLegend().setFrame(BlockBorder.NONE);
        xyChart.getTitle().setFont(new java.awt.Font("Arial",  java.awt.Font.BOLD , 13));
        
        // Drawing the chart and creating the Image
        xyChart.draw(g2d3, r2d3);
		g2d3.dispose();
		xyImage = Image.getInstance(xy);
		preface.add(xyImage);
        
        // We add a new line 
        addEmptyLine(preface, 2);
        
        // Bar Chart
 		final PdfTemplate bar2 = cb.createTemplate(width, height);		
 		final Graphics2D g2d4 = new PdfGraphics2D(bar2, width, height);
 		final Rectangle2D r2d4 = new Rectangle2D.Double(0, 0, width, height);

 		barChart2 = ChartFactory.createBarChart("Members of the Groups", "Week of the Year",
 				"Number of Answers", groupNewLeaveStudents, PlotOrientation.VERTICAL, true,
 				true, true); 
 		
 		barChart2.getLegend().setFrame(BlockBorder.NONE);
 		barChart2.getTitle().setFont(new java.awt.Font("Arial",  java.awt.Font.BOLD , 13));
 		
 		
 		final CategoryPlot p = barChart2.getCategoryPlot(); 
 		final CategoryAxis domain1 = p.getDomainAxis();
 		domain1.setFixedDimension(1.0); 
 		domain1.setTickMarkInsideLength(10);
 		//setRange(0.0, 10.00);
 		//domain1.setTickUnit(new NumberTickUnit(1.0));
 		
 		 		
 		// Drawing the chart and creating the Image
 		barChart2.draw(g2d4, r2d4);
 		g2d4.dispose();
 		barImage2 = Image.getInstance(bar2);
 		preface.add(barImage2);
		
	}
	

	@Override
	protected byte[] createSha1(final File file) throws Exception {
		final MessageDigest digest = MessageDigest.getInstance("SHA-1");
		final InputStream fis = new FileInputStream(file);
		int n = 0;
		final byte[] buffer = new byte[8192];

		while (n != -1) {
			n = fis.read(buffer);
			fileSize += n;
			if (n > 0) {
				digest.update(buffer, 0, n);
			}
		}
		fis.close();
		return digest.digest();
	}

	@Override
	protected String byteArrayToHexString(final byte[] b) {
		String result = "";
		for (int i = 0; i < b.length; i++) {
			result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
		}
		return result;
	}

	@Override
	protected byte[] SHA1(final String text) throws NoSuchAlgorithmException{
	    final MessageDigest sha1 = MessageDigest.getInstance("SHA1");
	    return sha1.digest((text).getBytes()); 
	}
	
	@Override
	protected void buildHashs(final String pathnamehashString, final String pathnamehashFile){
		
		try {			

			// encrypting the contenthash with sha1 encryption for the EmptySpace
			contenthashString = byteArrayToHexString(SHA1(""));
			
			// encrypting the contenthash with sha1 encryption for the PDF file
			contenthashFile = byteArrayToHexString(createSha1(new File(FILE)));
			
			
			// encrypting the pathnamehash with sha1 encryption for the EmptySpace
			// "/35609/mod_resource/content/0/."
			this.pathnamehashString = byteArrayToHexString(SHA1(pathnamehashString));
			
			
			// encrypting the pathnamehash with sha1 encryption for the PDF file
			// "/35609/mod_resource/content/0/SecondPdf.pdf"
			this.pathnamehashFile = byteArrayToHexString(SHA1(pathnamehashFile));
			
		} catch (final Exception e) {
			e.printStackTrace();
		}
		
	}

	/**
	 * @return the contenthashFile
	 */
	public String getContenthashFile() {
		return contenthashFile;
	}

	/**
	 * @param contenthashFile the contenthashFile to set
	 */
	public void setContenthashFile(final String contenthashFile) {
		this.contenthashFile = contenthashFile;
	}

	/**
	 * @return the pathnamehashString
	 */
	public String getPathnamehashString() {
		return pathnamehashString;
	}

	/**
	 * @param pathnamehashString the pathnamehashString to set
	 */
	public void setPathnamehashString(final String pathnamehashString) {
		this.pathnamehashString = pathnamehashString;
	}

	/**
	 * @return the contenthashString
	 */
	public String getContenthashString() {
		return contenthashString;
	}

	/**
	 * @param contenthashString the contenthashString to set
	 */
	public void setContenthashString(final String contenthashString) {
		this.contenthashString = contenthashString;
	}

	/**
	 * @return the pathnamehashFile
	 */
	public String getPathnamehashFile() {
		return pathnamehashFile;
	}

	/**
	 * @param pathnamehashFile the pathnamehashFile to set
	 */
	public void setPathnamehashFile(final String pathnamehashFile) {
		this.pathnamehashFile = pathnamehashFile;
	}

	/**
	 * @return the pdfDescription
	 */
	public String getPdfDescription() {
		return pdfDescription;
	}

	/**
	 * @return the displayOptions
	 */
	public String getDisplayOptions() {
		return displayOptions;
	}

	/**
	 * @return the stringSize
	 */
	public long getStringSize() {
		return stringSize;
	}

	/**
	 * @param stringSize the stringSize to set
	 */
	public void setStringSize(final long stringSize) {
		this.stringSize = stringSize;
	}

	/**
	 * @return the fileSize
	 */
	public long getFileSize() {
		return fileSize;
	}

	/**
	 * @param fileSize the fileSize to set
	 */
	public void setFileSize(final long fileSize) {
		this.fileSize = fileSize;
	}

	/**
	 * @return the fILE
	 */
	public String getFILE() {
		return FILE;
	}

	/**
	 * @param fILE the fILE to set
	 */
	public void setFILE(final String fILE) {
		FILE = fILE;
	}

	/**
	 * @return the groupName
	 */
	public String getGroupName() {
		return groupName;
	}

	/**
	 * @param groupName the groupName to set
	 */
	public void setGroupName(final String groupName) {
		this.groupName = groupName;
	}
}
