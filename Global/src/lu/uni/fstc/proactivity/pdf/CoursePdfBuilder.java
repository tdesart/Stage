package lu.uni.fstc.proactivity.pdf;

import java.awt.Color;
import java.awt.Graphics2D;
//import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.GregorianCalendar;

import org.jfree.chart.*;
import org.jfree.chart.block.BlockBorder;
import org.jfree.chart.plot.*;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import com.itextpdf.awt.PdfGraphics2D;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

/**
 * @author remus.dobrican
 * 
 */
public class CoursePdfBuilder extends PdfBuilder{
	private String contenthashFile,  pathnamehashString, contenthashString, pathnamehashFile;
	private final String pdfDescription = "<p>Bravo !</p>", displayOptions = "a:2:{s:12:\"printheading\";i:0;s:10:\"printintro\";i:1;}";
	private GregorianCalendar cal;
	
	/**
	 * @return the fILE
	 */
	public String getFILE() {
		return FILE;
	}

	private DefaultPieDataset courseNumberOfGroups;
	private DefaultCategoryDataset courseYesNoStudents;
	private float width = 500, height = 200;
	private Image barImage1, pieImage1;
	private long fileSize, stringSize = 0;
	private JFreeChart pieChart, barChart1;

	private Font titleFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private Font small = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL);
	private Font smallItalic = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.ITALIC);

	private CoursePdfBuilder() {
		super.setType("Course");
		//FILE = "/home/moodle/stats/CourseStatistics.pdf";
		FILE = "stats/CourseStatistics.pdf";
		System.out.println(FILE);
	}
	/**
	 * @param courseNumberOfGroups 
	 * @param courseYesNoStudents 
	 */
	public CoursePdfBuilder(
			final DefaultPieDataset courseNumberOfGroups,
			DefaultCategoryDataset courseYesNoStudents
			) {
		
		this();
		cal = new GregorianCalendar();
		this.courseNumberOfGroups = courseNumberOfGroups;
		this.courseYesNoStudents = courseYesNoStudents;

		buildDocument();
	}
	
	@Override
	protected void addMetaData(final Document document) {
		document.addTitle("Statistics");
		document.addSubject("Statistics about the Social Groups");
		document.addKeywords("Social Groups");
		document.addAuthor("Dobrican Remus");
		document.addCreator("Dobrican Remus");
	}
	
	

	@Override
	protected void addTitlePage(final Document document, final PdfWriter writer) throws DocumentException {
		final Paragraph preface = new Paragraph();
		// We add one empty line
		addEmptyLine(preface, 1);
		// Lets write a big header
		preface.add(new Paragraph("Course Statistics", titleFont));

		// We add one empty line
		addEmptyLine(preface, 1);
		// We add the content
		addContent(preface);

		// creates the first set of statistics
		createImages(writer, preface);
		
		// We add one empty line
		addEmptyLine(preface, 1);

		document.add(preface);
		// Start a new page
		document.newPage();
	}


	@Override
	protected void addContent(final Paragraph preface) {
		final Chunk chunk_a1 = new Chunk(
				"	This report generated by the Proactive System in order to provide students with"
						+ "fresh news about the interaction inside the social groups.", small);
		final Chunk chunk_b1 = new Chunk(
				" Below you have information about some of the most "
						+ "interesting data from the Course - ", small);
		final Chunk chunk_b2 = new Chunk("Communities of Practice.", smallItalic);

		final Paragraph firstSentence = new Paragraph();
		firstSentence.add(chunk_a1);
		firstSentence.add(chunk_b1);
		firstSentence.add(chunk_b2);
		preface.add(firstSentence);
		
		// We add one empty line
		addEmptyLine(preface, 1);
		
		final Chunk chunk_b3 = new Chunk(
				" The pie chart in figure 1 contains information about how many groups are formed at the moment " +
				"and in the timeline in figure 2 there is fresh information on how many students want to join Social Groups and how many refused.", small);
		
		
		final Paragraph secondSentence = new Paragraph();
		secondSentence.add(chunk_b3);
		preface.add(secondSentence);
		
		// We add one empty line
		addEmptyLine(preface, 1);
		
		final Chunk chunk_b4 = new Chunk(
				" This is week is week " + cal.get(GregorianCalendar.WEEK_OF_YEAR) +  " of the year 2013." , small);
		
		final Paragraph thirdSentence = new Paragraph();
		thirdSentence.add(chunk_b4);
		preface.add(thirdSentence);
	}
	

	/**
	 * @param paragraph
	 * @param number
	 */
	private void addEmptyLine(final Paragraph paragraph, final int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}

	
	@Override
	protected void createImages(final PdfWriter writer, final Paragraph preface) throws DocumentException {
		// step 4
		final PdfContentByte cb = writer.getDirectContent();

		// Pie chart
		final PdfTemplate pie = cb.createTemplate(width, height);		
		final Graphics2D g2d1 = new PdfGraphics2D(pie, width, height);
		final Rectangle2D r2d1 = new Rectangle2D.Double(0, 0, width, height);
		
		pieChart = ChartFactory.createPieChart("Different Groups Categories", courseNumberOfGroups, true, false, false);
		
		pieChart.setBackgroundPaint(Color.WHITE);
		pieChart.setBorderVisible(false);
        
		pieChart.getTitle().setFont(new java.awt.Font("Arial",  java.awt.Font.BOLD , 13));       
		pieChart.getLegend().setItemFont(new java.awt.Font("Arial",  java.awt.Font.BOLD, 10));
        //chart.getLegend().setBackgroundPaint(Color.cyan);
		pieChart.getLegend().setFrame(BlockBorder.NONE);
                
        PiePlot plot = (PiePlot)pieChart.getPlot();
    	plot.setLabelOutlinePaint(Color.LIGHT_GRAY);
    	plot.setOutlineVisible(false);
    	plot.setLabelFont(new java.awt.Font("Arial",  java.awt.Font.BOLD, 10));
    	plot.setBackgroundPaint(Color.WHITE);    	
    	
    	pieChart.draw(g2d1, r2d1);
		g2d1.dispose();
		pieImage1 = Image.getInstance(pie);
		preface.add(pieImage1);
		
		// We add a new line
		addEmptyLine(preface, 4);
				
		// Bar chart
		final PdfTemplate bar = cb.createTemplate(width, height);
		final Graphics2D g2d2 = new PdfGraphics2D(bar, width, height);
		final Rectangle2D r2d2 = new Rectangle2D.Double(0, 0, width, height);

		barChart1 = ChartFactory.createBarChart("Overall answer", "Week of the Year",
				"Number of Answers", courseYesNoStudents, PlotOrientation.VERTICAL, true,
				true, true);
		
		
		barChart1.getLegend().setFrame(BlockBorder.NONE);
		barChart1.getTitle().setFont(new java.awt.Font("Arial",  java.awt.Font.BOLD , 13));
		
		barChart1.draw(g2d2, r2d2);
		g2d2.dispose();
		barImage1 = Image.getInstance(bar);
		preface.add(barImage1);
	}
	
	@Override
	protected byte[] createSha1(final File file) throws Exception {
		MessageDigest digest = MessageDigest.getInstance("SHA-1");
		InputStream fis = new FileInputStream(file);
		int n = 0;
		byte[] buffer = new byte[8192];

		while (n != -1) {
			n = fis.read(buffer);
			fileSize += n;
			if (n > 0) {
				digest.update(buffer, 0, n);
			}
		}
		fis.close();
		return digest.digest();
	}

	@Override
	protected String byteArrayToHexString(final byte[] b) {
		String result = "";
		for (int i = 0; i < b.length; i++) {
			result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
		}
		return result;
	}

	/**
	 * @param text
	 * @return a byte array
	 * @throws NoSuchAlgorithmException
	 */
	@Override
	public byte[] SHA1(String text) throws NoSuchAlgorithmException{
	    MessageDigest sha1 = MessageDigest.getInstance("SHA1");
	    return sha1.digest((text).getBytes()); 
	}
	
	@Override
	public void buildHashs(final String pathnamehashString, final String pathnamehashFile){
		
		try {			

			// encrypting the contenthash with sha1 encryption for the EmptySpace
			contenthashString = byteArrayToHexString(SHA1(""));
			
			// encrypting the contenthash with sha1 encryption for the PDF file
			contenthashFile = byteArrayToHexString(createSha1(new File(FILE)));
			
			
			// encrypting the pathnamehash with sha1 encryption for the EmptySpace
			// "/35609/mod_resource/content/0/."
			this.pathnamehashString = byteArrayToHexString(SHA1(pathnamehashString));
			
			
			// encrypting the pathnamehash with sha1 encryption for the PDF file
			// "/35609/mod_resource/content/0/SecondPdf.pdf"
			this.pathnamehashFile = byteArrayToHexString(SHA1(pathnamehashFile));
			
		} catch (final Exception e) {
			e.printStackTrace();
		}
		
	}

	/**
	 * @return the contenthashFile
	 */
	public String getContenthashFile() {
		return contenthashFile;
	}

	/**
	 * @param contenthashFile the contenthashFile to set
	 */
	public void setContenthashFile(String contenthashFile) {
		this.contenthashFile = contenthashFile;
	}

	/**
	 * @return the pathnamehashString
	 */
	public String getPathnamehashString() {
		return pathnamehashString;
	}

	/**
	 * @param pathnamehashString the pathnamehashString to set
	 */
	public void setPathnamehashString(String pathnamehashString) {
		this.pathnamehashString = pathnamehashString;
	}

	/**
	 * @return the contenthashString
	 */
	public String getContenthashString() {
		return contenthashString;
	}

	/**
	 * @param contenthashString the contenthashString to set
	 */
	public void setContenthashString(String contenthashString) {
		this.contenthashString = contenthashString;
	}

	/**
	 * @return the pathnamehashFile
	 */
	public String getPathnamehashFile() {
		return pathnamehashFile;
	}

	/**
	 * @param pathnamehashFile the pathnamehashFile to set
	 */
	public void setPathnamehashFile(String pathnamehashFile) {
		this.pathnamehashFile = pathnamehashFile;
	}

	/**
	 * @return the pdfDescription
	 */
	public String getPdfDescription() {
		return pdfDescription;
	}

	/**
	 * @return the displayOptions
	 */
	public String getDisplayOptions() {
		return displayOptions;
	}

	/**
	 * @return the stringSize
	 */
	public long getStringSize() {
		return stringSize;
	}

	/**
	 * @param stringSize the stringSize to set
	 */
	public void setStringSize(long stringSize) {
		this.stringSize = stringSize;
	}

	/**
	 * @return the fileSize
	 */
	public long getFileSize() {
		return fileSize;
	}

	/**
	 * @param fileSize the fileSize to set
	 */
	public void setFileSize(long fileSize) {
		this.fileSize = fileSize;
	}
}
